@inject IJSRuntime JsRuntime

<div class="modal fade" id="@Id" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="@_labelId" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="@_labelId">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@OnCloseClicked">@CloseText</button>
                <button type="button" class="btn btn-primary"  @onclick="@OnOkClicked">@OkText</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Title { get; set; } = "Modal";

    [Parameter]
    public string? OkText { get; set; } = "OK";

    [Parameter]
    public string? CloseText { get; set; } = "Close";

    [Parameter]
    public Func<Task>? OnOkCallback { get; set; }

    [Parameter]
    public Func<Task>? OnCloseCallback { get; set; }

    public Task Show()
    {
        if (string.IsNullOrEmpty(Id))
        {
            return Task.CompletedTask;
        }

        return JsRuntime
            .InvokeAsync<object>("showModal", new object[] {$"#{Id}"})
            .AsTask();
    }

    public Task Hide()
    {
        if (string.IsNullOrEmpty(Id))
        {
            return Task.CompletedTask;
        }

        return JsRuntime
            .InvokeAsync<object>("hideModal", new object[] {$"#{Id}"})
            .AsTask();
    }

    protected override void OnParametersSet()
    {
        _labelId = $"{Id}-label";
    }

    private Task OnOkClicked()
    {
        if (OnOkCallback is null)
        {
            return Task.CompletedTask;
        }

        return OnOkCallback();
    }

    private Task OnCloseClicked()
    {
        if (OnCloseCallback is null)
        {
            return Task.CompletedTask;
        }

        return OnCloseCallback();
    }

    private string? _labelId;
}