@page "/jobs"

@using Backend.Contracts
@using Backend.Contracts.Features.Jobs
@using Backend.Contracts.Streams
@using Orleans.Streams
@using Frontend.Components
@using Frontend.Features.Jobs.Components
@using Backend.Models.Features.Jobs
@using Frontend.Features.Jobs.Models
@using Frontend.Features.Jobs.Services

@* @implements Orleans.Streams.IAsyncObserver<JobUpdate> *@
@implements IAsyncDisposable

@inject Orleans.IClusterClient ClusterClient
@inject IJobService JobService

<JobEditModalComponent @ref="@_jobEditModal" Id="@_editModalId" Job="@_editingJob" OnOkCallback="@OnJobEditComplete"/>
<JobsListComponent Jobs="@_jobs" OnJobEdit="@OnJobEdit"/>

<div class="mt-4">
    <button class="btn btn-primary" @onclick="@OnAddJobClick">Add Job</button>
</div>

@code
{
    private readonly List<JobModelView> _jobs = new List<JobModelView>();

    private readonly Dictionary<Guid, int> _jobIndexes = new Dictionary<Guid, int>();
    private readonly string _editModalId = $"modal-{Guid.NewGuid().ToString()}";

    private StreamConsumer<JobUpdate>? _streamUpdates;
    private StreamProducer<JobMuster>? _streamMuster;

    private JobEditModalComponent? _jobEditModal;
    private JobModel? _editingJob;

    // public JobsPage()
    // {
    //     var sp = ClusterClient.GetStreamProvider(Constants.StreamProviderName);
    //
    //     _streamUpdates = new StreamConsumer<JobUpdate>(sp, JobConstants.StreamId, JobConstants.UpdatesStreamNs, OnUpdate);
    //     _streamMuster = new StreamProducer<JobMuster>(sp, JobConstants.StreamId, JobConstants.MusterStreamNs);
    // }

    protected override async Task OnInitializedAsync()
    {
        var allJobs = await JobService.LoadAllJobs();
        foreach (var job in allJobs)
        {
            var modelView = AddJob(job);
            modelView.Status = JobModelViewStatus.NotActive;
        }

        var sp = ClusterClient.GetStreamProvider(Constants.StreamProviderName);

        _streamUpdates = new StreamConsumer<JobUpdate>(sp, JobConstants.StreamId, JobConstants.UpdatesStreamNs, i => InvokeAsync(() => OnUpdate(i)));
        await _streamUpdates.Subscribe();

        _streamMuster = new StreamProducer<JobMuster>(sp, JobConstants.StreamId, JobConstants.MusterStreamNs);

        await _streamMuster.Next(JobMuster.Instance);
    }

    public async ValueTask DisposeAsync()
    {
        if (_streamUpdates != null)
        {
            await _streamUpdates.Unsubscribe();
        }
    }

    private async Task OnAddJobClick()
    {
        var job = new JobModel
        {
            JobId = Guid.NewGuid()
        };

        AddJob(job);

        await JobService.UpdateJob(job);
    }

    private Task OnJobEdit(JobModelView job)
    {
        _editingJob = job.Model;

        StateHasChanged();

        return _jobEditModal!.Show();
    }

    private async Task OnJobEditComplete()
    {
        await _jobEditModal!.Hide();

        StateHasChanged();

        if (_editingJob != null)
        {
            await JobService.UpdateJob(_editingJob);

            _editingJob = null;
        }
    }

    private JobModelView AddJob(JobModel job)
    {
        var modelView = new JobModelView(job);
        _jobs.Add(modelView);
        _jobIndexes.Add(job.JobId, _jobs.Count - 1);

        return modelView;
    }

    private JobModelView? TryFindJob(Guid id)
    {
        if (_jobIndexes.TryGetValue(id, out var index))
        {
            return _jobs[index];
        }

        return null;
    }

    private void ReplaceJob(JobModel job)
    {
        if (_jobIndexes.TryGetValue(job.JobId, out var index))
        {
            var oldJob = _jobs[index];
            _jobs[index] = new JobModelView(job)
            {
                Status = oldJob.Status
            };
        }
        else
        {
            AddJob(job);
        }
    }

    private async Task OnUpdate(JobUpdate item)
    {
    //     if (TryFindJob(item.JobId) is {} existingModel)
    //     {
    // // nothing
    //     }
    //     else
    //     {
    //         if (await JobService.LoadJob(item.JobId) is {} loadedJob)
    //         {
    //             existingModel = AddJob(loadedJob);
    //         }
    //         else
    //         {
    //             throw new Exception($"Job '{item.JobId.ToString()}' not found");
    //         }
    //     }

        switch (item)
        {
            case JobUpdate.Muster _:
            {
                if (await JobService.LoadJob(item.JobId) is {} loadedJob)
                {
                    ReplaceJob(loadedJob);
                }
                else
                {
                    throw new Exception($"Job '{item.JobId.ToString()}' not found");
                }

                // existingModel.Status = JobModelViewStatus.Active;

                break;
            }

            case JobUpdate.Update update:
            {
                // existingModel.Status = JobModelViewStatus.Active;

                if (await JobService.LoadJob(item.JobId) is {} loadedJob)
                {
                    ReplaceJob(loadedJob);
                }
                else
                {
                    throw new Exception($"Job '{item.JobId.ToString()}' not found");
                }

                break;
            }

            case JobUpdate.Delete _:
            {
                // existingModel.Status = JobModelViewStatus.Deleted;

                if (_jobIndexes.TryGetValue(item.JobId, out var index))
                {
                    _jobs.RemoveAt(index);
                    _jobIndexes.Remove(item.JobId);
                }

                break;
            }
        }

        StateHasChanged();
    }

    // private async Task UpdateJob(Guid jobId)
    // {
    //     if (await JobService.LoadJob(jobId) is {} loadedJob)
    //     {
    //         if (TryFindJob(jobId) is {} existingJob)
    //         {
    //             existingJob.
    //         }
    //     }
    //     else
    //     {
    //         throw new Exception($"Job '{jobId.ToString()}' not found");
    //     }
    // }
}