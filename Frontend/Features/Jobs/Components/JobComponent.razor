@using Backend.Models.Features.Jobs
@using Frontend.Components
@using Frontend.Features.Jobs.Models

@if (Job != null)
{
    <div class="card">
        @*<div class="card-header">
            @if (Job.Status == JobModelViewStatus.Active)
            {

            }
        </div>*@
        <div class="card-body">
            @*<h6 class="card-title @(IsActive(Job) ? "" : "text-muted")">@Job.Model.Name</h6>*@

            <InputText @bind-Value="Job.Model.Name" readonly="@_editMode" />
            <InputNumber @bind-Value="Job.Model.BotsCount" readonly="@_editMode" />

            @*<EditableInputComponent Label="Name" Edit="@_editMode" @bind-Value="@Job.Model.Name"/>*@
            @*<EditableInputComponent Label="Count" Edit="@_editMode" @bind-Value="@Job.Model.BotsCount"/>*@
            @* <EditableInputComponent Label="Updates" Value="@Job.UpdateCount"/> *@
        </div>
        <div class="card-footer">
            @if (_editMode)
            {
                <button class="btn btn-primary" @onclick="@Save">Save</button>
                <button class="btn btn-danger" @onclick="@Cancel">Cancel</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="@EnterEditMode">Edit</button>
            }
        </div>
    </div>
}

@code
{
    [Parameter]
    public JobModelView? Job { get; set; }

    [Parameter]
    public Func<JobModelView, Task>? OnJobUpdated { get; set; }

    private bool _editMode;
    // private string? _jobId;

    // private JobModelView? _originalJob;

    protected override void OnParametersSet()
    {
        // if (Job != null)
        // {
        //     _jobId = $"job_{Job.JobId.ToString()}";
        // }
    }

    private void EnterEditMode()
    {
        _editMode = true;

        if (Job != null)
        {
            // _originalJob = Job;

            // Job = new JobModel(_originalJob.JobId, _originalJob.Name, _originalJob.BotsCount);
        }
    }

    private async Task Save()
    {
        _editMode = false;

        if (Job != null && OnJobUpdated != null)
        {
            await OnJobUpdated(Job);
        }

    // _originalJob = null;
    }

    private void Cancel()
    {
        _editMode = false;

        // Job = _originalJob;
        // _originalJob = null;
    }

    private bool IsActive(JobModelView job) => job.Status == JobModelViewStatus.Active;
}